name: CI - Validate Business Metrics

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-metrics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install prometheus-client psycopg2-binary pytest
    
    - name: Validate script syntax
      run: |
        python -m py_compile scripts/pipeline_metrics.py
        echo "‚úÖ Script syntax is valid"
    
    - name: Test all imports work
      run: |
        python -c "
        from prometheus_client import Gauge, Counter, Summary, start_http_server
        import psycopg2
        import time
        import logging
        print('‚úÖ All required imports successful')
        "
    
    - name: Validate business logic structure
      run: |
        python -c "
        # Test that our business logic functions are properly defined
        import ast
        with open('scripts/pipeline_metrics.py', 'r') as f:
            tree = ast.parse(f.read())
        
        function_names = [node.name for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        required_functions = ['get_db_connection', 'monitor_infrastructure', 'monitor_data_pipeline']
        
        for func in required_functions:
            if func in function_names:
                print(f'‚úÖ Function {func} found')
            else:
                print(f'‚ùå Missing function: {func}')
                exit(1)
        "
    
    - name: Check metrics definitions
      run: |
        python -c "
        # Verify all Prometheus metrics are properly defined
        import ast
        with open('scripts/pipeline_metrics.py', 'r') as f:
            content = f.read()
        
        required_metrics = [
            'bronze_layer_row_count',
            'silver_layer_row_count', 
            'gold_layer_row_count',
            'total_wastage_percentage',
            'avoidable_loss_cost'
        ]
        
        for metric in required_metrics:
            if f'{metric} = Gauge(' in content:
                print(f'‚úÖ Metric {metric} properly defined')
            else:
                print(f'‚ùå Missing metric: {metric}')
                exit(1)
        "
    
    - name: Run basic tests
      run: |
        python -c "
        # Basic validation that doesn't require database
        print('‚úÖ Business metrics CI validation completed')
        print('üìä This validates:')
        print('   - Script syntax')
        print('   - Import dependencies') 
        print('   - Function structure')
        print('   - Metrics definitions')
        print('')
        print('üöÄ Real database testing happens in production deployment')
        "
